package ldev.com.agenda.domain.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import ldev.com.agenda.domain.entity.Paciente;
import ldev.com.agenda.domain.exception.BusinessException;
import ldev.com.agenda.domain.repository.PacienteRepository;
import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class PacienteService {

	private final PacienteRepository repository = null;

	public Paciente salvar(Paciente paciente) {
		boolean existeCpf = false;

		Optional<Paciente> optPaciente = repository.findByCpf(paciente.getCpf());

		if (optPaciente.isPresent()) {
			if (!optPaciente.get().getId().equals(paciente.getId())) {
				existeCpf = true;
			}
		}

		if (existeCpf) {
			throw new BusinessException("Cpf já cadastrado!");
		}

		return repository.save(paciente);
	}

	public Paciente alterar(Long id, Paciente paciente) {
		Optional<Paciente> optPaciente = this.buscarPorId(id);

		if (optPaciente.isEmpty()) {
			throw new BusinessException("Paciente não cadastrado!");
		}

		paciente.setId(id);

		return salvar(paciente);
	}

	public List<Paciente> listarTodos() {
		return repository.findAll();
	}

	public Optional<Paciente> buscarPorId(Long id) {
		return repository.findById(id);
	}

	public void deletar(Long id) {
		repository.deleteById(id);
	}
}